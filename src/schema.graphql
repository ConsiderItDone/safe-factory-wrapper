#import { Module } into Safe from "wrap://ens/safe-proxy-factory-wrapper.polywrap.eth"
#import { Module, Connection, TxOverrides, StaticTxResult, TxRequest, EventNotification, Network, TxReceipt, TxResponse, Log, Access } into Ethereum from "wrap://ens/ethereum.polywrap.eth"
#import * into Datetime from "wrap://ens/datetime.polywrap.eth"

type Module {
    deploySafe(
        safeAccountConfig: SafeAccountConfig!,
        safeDeploymentConfig: SafeDeploymentConfig,
        options: TransactionOptions,
        connection: Ethereum_Connection
    ): String!
}

enum OperationType {
    Call,
    DelegateCall
}

type SafeAccountConfig {
    owners: [String!]!
    threshold: UInt
    to: String
    data: String
    fallbackHandler: String
    paymentToken: String
    payment: BigInt
    paymentReceiver: String
}

type SafeDeploymentConfig {
    saltNonce: String!
    version: String
}

type MetaTransactionData {
    to: String!
    value: String!
    data: String!
    operation: OperationType
}

type SafeTransactionData implements MetaTransactionData {
    safeTxGas: BigInt!
    baseGas: BigInt!
    gasPrice: BigInt!
    gasToken: String!
    refundReceiver: String!
    nonce: BigInt!
}

type SafeTransactionDataPartial implements MetaTransactionData {
    safeTxGas: BigInt
    baseGas: BigInt
    gasPrice: BigInt
    gasToken: String
    refundReceiver: String
    nonce: BigInt
}

type SafeSignature {
    signer: String!
    data: String!
}

type SafeTransaction {
    data: SafeTransactionData!
    signatures: [SafeSignature!]!
}

type BaseTransactionResult {
    hash: String!
}

type TransactionResult implements BaseTransactionResult {
    receipt: Ethereum_TxReceipt
    transactionResponse: Ethereum_TxResponse
    options: TransactionOptions
}

type TransactionOptions {
    from: String
    gas: BigInt
    gasLimit: BigInt
    gasPrice: BigInt
    maxFeePerGas: BigInt
    maxPriorityFeePerGas: BigInt
}

type Eip3770Address {
    prefix: String!
    address: String!
}